

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Yeahyun Kim</title>
  <subtitle>소소한 개발 일지</subtitle>
  <updated>2024-03-13T17:29:40+09:00</updated>
  <author>
    <name>Youihyon Kim</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Youihyon Kim </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>JAVA 문법 (5) - for, while, do-while 반복문</title>
    <link href="http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(5)-for,-while,-do-while-%EB%B0%98%EB%B3%B5%EB%AC%B8/" rel="alternate" type="text/html" title="JAVA 문법 (5) - for, while, do-while 반복문" />
    <published>2024-03-13T00:00:00+09:00</published>
  
    <updated>2024-03-13T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(5)-for,-while,-do-while-%EB%B0%98%EB%B3%B5%EB%AC%B8/</id>
    <content src="http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(5)-for,-while,-do-while-%EB%B0%98%EB%B3%B5%EB%AC%B8/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Grammar" />
    
  

  
    <summary>
      





      🔎 반복문이란



  코드를 반복적으로 실행하게 하는 제어문의 한 종류이다. 반복문의 종류는 크게 세가지가 있다.
• for 문
• while문 
• do-while 문




🔎 for 문

int num = 0;

for(int i = 0(초기화); i &amp;lt; 10(조건식); i++(증감식) {
	num += i;
}
	
System.out.println(num);



  • for문은 초기화, 조건식, 증감식으로 구성된 제어 구조
• 반복 횟수가 정해져 있는 경우에 사용
• 주어진 횟수만큼 반복을 수행하며, 반복 횟수를 명시적으로 알 수 있기 때문에 사용하기 간편



int sum = 0;  
int endNum = 3;  
  
for (int i = 1; i &amp;lt;= endNum; i...
    </summary>
  

  </entry>

  
  <entry>
    <title>JAVA 문법 (4) - switch 조건문</title>
    <link href="http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(4)-switch-%EC%A1%B0%EA%B1%B4%EB%AC%B8/" rel="alternate" type="text/html" title="JAVA 문법 (4) - switch 조건문" />
    <published>2024-03-13T00:00:00+09:00</published>
  
    <updated>2024-03-13T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(4)-switch-%EC%A1%B0%EA%B1%B4%EB%AC%B8/</id>
    <content src="http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(4)-switch-%EC%A1%B0%EA%B1%B4%EB%AC%B8/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Grammar" />
    
  

  
    <summary>
      





      🔎 조건문 이란



  개발자가 작성한 코드를 특정 조건에 따라 코드의 실행의 흐름을 제어하는 것이다. 조건문은 크게 
• if 문
	- else if
	- else 
• switch 문




🔎 switch문

01. switch 문

switch (값) {
	case 값1 : 
		실행문1;
		break;
		
	case 값2 : 
		실행문2;
		break;
		
	case 값3 : 
		실행문3;
		break;
	default :
		실행문4;
}



  조건식에 해당하는 특정 값으로 실행할 코드를 선택한다



int grade = 2;
int coupon;
  
int coupon;  
switch (grade) {  
    case 1:  
        coupon = 100...
    </summary>
  

  </entry>

  
  <entry>
    <title>JAVA 문법 (3) - if, else, else if 조건문</title>
    <link href="http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(3)-if,-else,-else-if-%EC%A1%B0%EA%B1%B4%EB%AC%B8/" rel="alternate" type="text/html" title="JAVA 문법 (3) - if, else, else if 조건문" />
    <published>2024-03-13T00:00:00+09:00</published>
  
    <updated>2024-03-13T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(3)-if,-else,-else-if-%EC%A1%B0%EA%B1%B4%EB%AC%B8/</id>
    <content src="http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(3)-if,-else,-else-if-%EC%A1%B0%EA%B1%B4%EB%AC%B8/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Grammar" />
    
  

  
    <summary>
      





      🔎 조건문 이란



  개발자가 작성한 코드를 특정 조건에 따라 코드의 실행의 흐름을 제어하는 것이다. 조건문은 크게 
• if 문
	- else if
	- else 
• switch 문




🔎 if / else / else if

01. if문

if (조건식) {
	실행문1;
	실행문2;
}



  조건식이 true 일경우 중괄호 안에있는 실행문을 실행시킨다.



int age = 20;

if (age &amp;gt;= 20) { //true
	System.out.println("성인입니다") //실행
}
if (age =&amp;lt; 20) { //false
	System.out.println("미성년자입니다") //실행안됨
}

// 성인입니다



  age가 20살 이상일 경우, "성인입니다"...
    </summary>
  

  </entry>

  
  <entry>
    <title>mySQL 문법 (10) - DELETE 데이터 삭제하기</title>
    <link href="http://localhost:4000/posts/mySQL-%EB%AC%B8%EB%B2%95-(10)-DELETE-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="mySQL 문법 (10) - DELETE 데이터 삭제하기" />
    <published>2024-03-12T00:00:00+09:00</published>
  
    <updated>2024-03-12T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/mySQL-%EB%AC%B8%EB%B2%95-(10)-DELETE-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0/</id>
    <content src="http://localhost:4000/posts/mySQL-%EB%AC%B8%EB%B2%95-(10)-DELETE-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="mySQL" />
    
    <category term="Grammarㅤ" />
    
  

  
    <summary>
      





      💡DELETE

DELETE


  The DELETE statement is used to delete existing records in a table.


UPDATE 는 테이블의 기존 데이터 값을 삭제하는데 사용한다.

02. 주의사항


  반드시 WHERE절을 사용하여 특정 데이터만 삭제하는데 사용하자. 그렇지 않으면 모든 데이터가 삭제될수도…




💡문법 Syntax

01. 특정한 컬럼의 데이터값을 삭제할 때

DELETE FROM 테이블명 WHERE 컬럼1 = '삭제할 값';



02. 모든 데이터를 삭제할 때

DELETE FROM 테이블명




💡사용예시

01. 특정한 컬럼의 데이터값을 삭제할 때

DELETE FROM Customers
WHERE CustomerID = ...
    </summary>
  

  </entry>

  
  <entry>
    <title>JAVA study (7) - String 리터럴, String 객체</title>
    <link href="http://localhost:4000/posts/JAVA-study-(7)-String-%EB%A6%AC%ED%84%B0%EB%9F%B4,-String-%EA%B0%9D%EC%B2%B4/" rel="alternate" type="text/html" title="JAVA study (7) - String 리터럴, String 객체" />
    <published>2024-03-12T00:00:00+09:00</published>
  
    <updated>2024-03-13T12:52:44+09:00</updated>
  
    <id>http://localhost:4000/posts/JAVA-study-(7)-String-%EB%A6%AC%ED%84%B0%EB%9F%B4,-String-%EA%B0%9D%EC%B2%B4/</id>
    <content src="http://localhost:4000/posts/JAVA-study-(7)-String-%EB%A6%AC%ED%84%B0%EB%9F%B4,-String-%EA%B0%9D%EC%B2%B4/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  
    <summary>
      





      🔎 문자열 생성


Java에서 문자열을 생성하는 과정은 크게 2가지 방법이 있다.

  String literal
  new String()
두개는 어떤 차이를 가지고 있을까?



01. String Literal

String str1 = "Hello";
String str2 = "Hello";



  String Literal은 문자열을 생성하는 가장 간단하고 일반적이 방법이다. 이 방식은 문자열을 큰 따옴표(“ “) 로 둘러싸서 표현한다. 
String Literal 방식으로 문자열을 생성하면, JAVA Heap 메모리 영역의 문자열 상수 풀(String Constant Pool) 영역에 값이 저장이 된다.



02. new String()

String str3 = new String(...
    </summary>
  

  </entry>

</feed>


