

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Yeahyun Kim</title>
  <subtitle>소소한 개발 일지</subtitle>
  <updated>2024-03-06T18:10:08+09:00</updated>
  <author>
    <name>Youihyon Kim</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Youihyon Kim </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>mySQL 문법 (1) - 데이터 조회하기 SELECT, FROM</title>
    <link href="http://localhost:4000/posts/mySQL-%EB%AC%B8%EB%B2%95-(1)-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A1%B0%ED%9A%8C%ED%95%98%EA%B8%B0-SELECT,-FROM/" rel="alternate" type="text/html" title="mySQL 문법 (1) - 데이터 조회하기 SELECT, FROM" />
    <published>2024-03-06T00:00:00+09:00</published>
  
    <updated>2024-03-06T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/mySQL-%EB%AC%B8%EB%B2%95-(1)-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A1%B0%ED%9A%8C%ED%95%98%EA%B8%B0-SELECT,-FROM/</id>
    <content src="http://localhost:4000/posts/mySQL-%EB%AC%B8%EB%B2%95-(1)-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A1%B0%ED%9A%8C%ED%95%98%EA%B8%B0-SELECT,-FROM/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="mySQL" />
    
    <category term="Grammar" />
    
  

  
    <summary>
      





      SELECT, FROM
01. SELECT

SELECT 는 데이터를 가져오는 기본 명령어로, 데이터를 조회하는 모든 Query에 사용된다.
기본적으로 컬럼을 선택한다고 생각하면 된다.


02. FROM

FROM 은 데이터를 가져올 테이블을 특정해주는 명령어이다.
기본적으로 테이블을 선택한다고 생각하면 된다.



문법보기

01. 테이블의 모든 컬럼 불러오기

select * from food_orders


위의 쿼리를 해석하면, food_orders 라는 테이블에서 모든 컬럼을 선택해서 가져와줘 가 된다.





02. 테이블의 원하는 컬럼 불러오기

select order_id, restaurant_name from food_orders


위의 쿼리를 해석하면, food_orders 라는...
    </summary>
  

  </entry>

  
  <entry>
    <title>플러그인 - Spring Boot Devtools</title>
    <link href="http://localhost:4000/posts/%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-thymeleaf/" rel="alternate" type="text/html" title="플러그인 - Spring Boot Devtools" />
    <published>2024-02-27T00:00:00+09:00</published>
  
    <updated>2024-02-27T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-thymeleaf/</id>
    <content src="http://localhost:4000/posts/%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-thymeleaf/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Plugin" />
    
  

  
    <summary>
      





      thymeleaf - HTML 동적 렌더링

thymeleaf(타임리프)

타임리프는 백엔드 서버에서 Html을 동적으로 렌더링  Java Template Engine 이다.
해당 플러그인의 주요 목적은 유지 관리가 수월한 템플릿을 작성하도록 지원해주고, 타임리프의 핵심 기능인 Natural Template 을 통해 제공해주는데, 서버 사이드 렌더링을 하는데 필요한 데이터 값이 없더라도, 프로토 타입으로서의 역할을 해줄 수 있는 걸 말한다.

이 특징이 기존 Java Template Engine 중의 하나인 Jsp 와 가장 다른 점인데 Jsp 는 화면을 보기 위해선 서버의 도움이 필요하다. 그치만 Thymeleaf 는 서버의 도움없이 프로토 타입 형태로도 뷰를 볼 수 있다.

그렇기 때문에 Thymel...
    </summary>
  

  </entry>

  
  <entry>
    <title>플러그인 - Spring Boot Devtools</title>
    <link href="http://localhost:4000/posts/%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-Spring-Boot-Devtools/" rel="alternate" type="text/html" title="플러그인 - Spring Boot Devtools" />
    <published>2024-02-27T00:00:00+09:00</published>
  
    <updated>2024-02-27T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-Spring-Boot-Devtools/</id>
    <content src="http://localhost:4000/posts/%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-Spring-Boot-Devtools/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Plugin" />
    
  

  
    <summary>
      





      Spring Boot Devtools - 서버 자동 재가동

Spring Boot Devtools

소스의 변경이 일어날 때마다 스프링부트의 로컬 서버를 매번 재실행 해줘야하는 번거로움이 있었다..


  소스 변경
  로컬 서버 재실행
  웹사이트 새로고침


하지만, Spring Boot Devtools 를 사용하면 소스의 변경이 일어났을때 서버를 재시작하지 않아도, 서버가 자동으로 재가동 시켜주는 매우 편리한 플러그인이다.


01. build.gradle에 플러그인 추가

아래의 코드를 build.gradle 파일에 추가해준다.
dependencies {  
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}



02. ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Static Content - 정적 컨텐츠</title>
    <link href="http://localhost:4000/posts/Static-Content-%EC%A0%95%EC%A0%81-%EC%BB%A8%ED%85%90%EC%B8%A0/" rel="alternate" type="text/html" title="Static Content - 정적 컨텐츠" />
    <published>2024-02-27T00:00:00+09:00</published>
  
    <updated>2024-02-27T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Static-Content-%EC%A0%95%EC%A0%81-%EC%BB%A8%ED%85%90%EC%B8%A0/</id>
    <content src="http://localhost:4000/posts/Static-Content-%EC%A0%95%EC%A0%81-%EC%BB%A8%ED%85%90%EC%B8%A0/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  
    <summary>
      





      Static Content (정적 컨텐츠)

01. 정적 컨텐츠

정적 컨텐츠는 서버에서 데이터를 클라이언트로 보내주는게 아닌, 파일을 그대로 웹 브라우저에게 보내주는것을 정적 컨텐츠라고 한다.

요즘 많이 사용하고 있는 MVC(Model / View / Controller)는 동적 컨텐츠 인데, 둘의 차의점은
MVC경우 jsp, php 등 서버에서 프로그래밍을 해서 클라이언트에게 동적으로 전달한다.

하지만 정적 컨텐츠는 웹 브라우저에게 그대로 전달하는 방식이다.
spring boot에서는 정적 컨텐츠 기능을 기본적으로 제공을 하고 있다.

02. 코드로 작성해보기

먼저, resources -&amp;gt; static 폴더 안에 hello-static.html 이라는 파일을 생성하였다.
해당 파일을 로컬...
    </summary>
  

  </entry>

  
  <entry>
    <title>[Java] 자바 빌드 도구 종류 Maven, Gradle 차이점</title>
    <link href="http://localhost:4000/posts/%EC%9E%90%EB%B0%94-%EB%B9%8C%EB%93%9C-%EB%8F%84%EA%B5%AC-%EC%A2%85%EB%A5%98-Maven,-Gradle-%EC%B0%A8%EC%9D%B4%EC%A0%90/" rel="alternate" type="text/html" title="[Java] 자바 빌드 도구 종류 Maven, Gradle 차이점" />
    <published>2024-02-26T00:00:00+09:00</published>
  
    <updated>2024-02-26T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%9E%90%EB%B0%94-%EB%B9%8C%EB%93%9C-%EB%8F%84%EA%B5%AC-%EC%A2%85%EB%A5%98-Maven,-Gradle-%EC%B0%A8%EC%9D%B4%EC%A0%90/</id>
    <content src="http://localhost:4000/posts/%EC%9E%90%EB%B0%94-%EB%B9%8C%EB%93%9C-%EB%8F%84%EA%B5%AC-%EC%A2%85%EB%A5%98-Maven,-Gradle-%EC%B0%A8%EC%9D%B4%EC%A0%90/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  
    <summary>
      





      메이븐(Maven) 이란?

01. 메이븐 정의

Maven은 주로 Java 개발에 사용되는 프로젝트 관리 빌드 도구 이다.  Apache Ant의 대안으로 만들어 졌으며, Apache Software Foundation에서 호스팅하는 Maven은 자카르타 프로젝트의 일부로 시작되었다고 한다.


02. 메이븐 특징


  빌드 절차를 간소화
  정형화된 빌드 시스템을 제공
  프로젝트 정보를 제공
  Pom.xml 파일을 통해 프로젝트를 빌드


    03. 메이븐의 LifeCycle
  


미리 정의하고 있는 빌드 순서를 라이프사이클이라고 한다.
각 빌드 단계를 phase라 하며 각 phase들은 서로 의존 단계를 가지고 있는데,
메이븐은 프로젝트 생성에 필요한 단계(phase)들을 Build...
    </summary>
  

  </entry>

</feed>


