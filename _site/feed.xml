

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Yeahyun Kim</title>
  <subtitle>소소한 개발 일지</subtitle>
  <updated>2024-03-25T13:45:18+09:00</updated>
  <author>
    <name>Youihyon Kim</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Youihyon Kim </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>JAVA study (8) - Array 배열을 print 했을때 주소값이 나오는 이유</title>
    <link href="http://localhost:4000/posts/JAVA-study-(8)-Array-%EB%B0%B0%EC%97%B4%EC%9D%84-print-%ED%96%88%EC%9D%84%EB%95%8C-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%A3%BC%EC%86%8C%EA%B0%80-%EB%82%98%EC%98%A4%EB%8A%94-%EC%9D%B4%EC%9C%A0/" rel="alternate" type="text/html" title="JAVA study (8) - Array 배열을 print 했을때 주소값이 나오는 이유" />
    <published>2024-03-19T00:00:00+09:00</published>
  
    <updated>2024-03-19T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/JAVA-study-(8)-Array-%EB%B0%B0%EC%97%B4%EC%9D%84-print-%ED%96%88%EC%9D%84%EB%95%8C-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%A3%BC%EC%86%8C%EA%B0%80-%EB%82%98%EC%98%A4%EB%8A%94-%EC%9D%B4%EC%9C%A0/</id>
    <content src="http://localhost:4000/posts/JAVA-study-(8)-Array-%EB%B0%B0%EC%97%B4%EC%9D%84-print-%ED%96%88%EC%9D%84%EB%95%8C-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%A3%BC%EC%86%8C%EA%B0%80-%EB%82%98%EC%98%A4%EB%8A%94-%EC%9D%B4%EC%9C%A0/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  
    <summary>
      





      🔎 배열을 출력했을때 메모리 주소가 나오는 이유


int[] arrayValue = new int[5] //배열 생성
System.out.println(arrayValue) // [I@a09ee92



  위에는 [1, 2, 3, 4, 5] 의 값을 가지고있는 배열을 생성하였다.
그리고 해당 변수를 출력해보면 메모리 주소값이 출력이 되는데, [I@a09ee92 이는 왜이럴까?





01. 배열 참조값 보관

int[] arrayValue = new int[1, 2, 3, 4, 5] //배열 생성
System.out.println(arrayValue) // [I@a09ee92



  int[] students 변수는 new int[5] 로 생성한 배열의 참조값을 가지고 있다.



  
   ...
    </summary>
  

  </entry>

  
  <entry>
    <title>JAVA 문법 (6) - 배열</title>
    <link href="http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(6)-%EB%B0%B0%EC%97%B4/" rel="alternate" type="text/html" title="JAVA 문법 (6) - 배열" />
    <published>2024-03-13T00:00:00+09:00</published>
  
    <updated>2024-03-13T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(6)-%EB%B0%B0%EC%97%B4/</id>
    <content src="http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(6)-%EB%B0%B0%EC%97%B4/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Grammar" />
    
  

  
    <summary>
      





      🔎 배열이란



  배열(Array)는 동일한 데이터 타입의 연속된 메모리 공간에 저장된 요소들의 집합이다.




01. 값 목록으로 배열 생성

int[] scores = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100}



  • 정해진 값의 목록이 있다면 위와 같이 배열 객체를 생성할 수 있다.




int[] scores = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100}

scores[0] = 15;



  • 대입 연산자로 값을 바꿀 수 있다.




02. new 연산자로 배열 생성

int[] scores = new int[5];



  • 정해진 값의 목록이 없지만, 앞으로 값을 정장할 배열을 미리 만들고 싶다면 new ...
    </summary>
  

  </entry>

  
  <entry>
    <title>JAVA 문법 (5) - for, while, do-while 반복문</title>
    <link href="http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(5)-for,-while,-do-while-%EB%B0%98%EB%B3%B5%EB%AC%B8/" rel="alternate" type="text/html" title="JAVA 문법 (5) - for, while, do-while 반복문" />
    <published>2024-03-13T00:00:00+09:00</published>
  
    <updated>2024-03-13T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(5)-for,-while,-do-while-%EB%B0%98%EB%B3%B5%EB%AC%B8/</id>
    <content src="http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(5)-for,-while,-do-while-%EB%B0%98%EB%B3%B5%EB%AC%B8/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Grammar" />
    
  

  
    <summary>
      





      🔎 반복문이란



  코드를 반복적으로 실행하게 하는 제어문의 한 종류이다. 반복문의 종류는 크게 세가지가 있다.
• for 문
• while문
• do-while 문




🔎 for 문

int num = 0;

for(int i = 0(초기화); i &amp;lt; 10(조건식); i++(증감식) {
	num += i;
}
	
System.out.println(num);



  • for문은 초기화, 조건식, 증감식으로 구성된 제어 구조
• 반복 횟수가 정해져 있는 경우에 사용
• 주어진 횟수만큼 반복을 수행하며, 반복 횟수를 명시적으로 알 수 있기 때문에 사용하기 간편



int sum = 0;  
int endNum = 3;  
  
for (int i = 1; i &amp;lt;= endNum; i+...
    </summary>
  

  </entry>

  
  <entry>
    <title>JAVA 문법 (4) - switch 조건문</title>
    <link href="http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(4)-switch-%EC%A1%B0%EA%B1%B4%EB%AC%B8/" rel="alternate" type="text/html" title="JAVA 문법 (4) - switch 조건문" />
    <published>2024-03-13T00:00:00+09:00</published>
  
    <updated>2024-03-13T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(4)-switch-%EC%A1%B0%EA%B1%B4%EB%AC%B8/</id>
    <content src="http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(4)-switch-%EC%A1%B0%EA%B1%B4%EB%AC%B8/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Grammar" />
    
  

  
    <summary>
      





      🔎 조건문 이란



  개발자가 작성한 코드를 특정 조건에 따라 코드의 실행의 흐름을 제어하는 것이다. 조건문은 크게 아래와 같이 나뉜다.
• if 문
	- else if
	- else 
• switch 문




🔎 switch문

01. switch 문

switch (값) {
	case 값1 : 
		실행문1;
		break;
		
	case 값2 : 
		실행문2;
		break;
		
	case 값3 : 
		실행문3;
		break;
	default :
		실행문4;
}



  조건식에 해당하는 특정 값으로 실행할 코드를 선택한다



int grade = 2;
int coupon;
  
int coupon;  
switch (grade) {  
    case 1:  
        c...
    </summary>
  

  </entry>

  
  <entry>
    <title>JAVA 문법 (3) - if, else, else if 조건문</title>
    <link href="http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(3)-if,-else,-else-if-%EC%A1%B0%EA%B1%B4%EB%AC%B8/" rel="alternate" type="text/html" title="JAVA 문법 (3) - if, else, else if 조건문" />
    <published>2024-03-13T00:00:00+09:00</published>
  
    <updated>2024-03-13T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(3)-if,-else,-else-if-%EC%A1%B0%EA%B1%B4%EB%AC%B8/</id>
    <content src="http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(3)-if,-else,-else-if-%EC%A1%B0%EA%B1%B4%EB%AC%B8/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Grammar" />
    
  

  
    <summary>
      





      🔎 조건문 이란



  개발자가 작성한 코드를 특정 조건에 따라 코드의 실행의 흐름을 제어하는 것이다. 조건문은 크게 아래와 같이 나뉜다.
• if 문
	- else if
	- else 
• switch 문




🔎 if / else / else if

01. if문

if (조건식) {
	실행문1;
	실행문2;
}



  조건식이 true 일경우 중괄호 안에있는 실행문을 실행시킨다.



int age = 20;

if (age &amp;gt;= 20) { //true
	System.out.println("성인입니다") //실행
}
if (age =&amp;lt; 20) { //false
	System.out.println("미성년자입니다") //실행안됨
}

// 성인입니다



  age가 20살 이상일 ...
    </summary>
  

  </entry>

</feed>


