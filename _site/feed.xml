

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Yeahyun Kim</title>
  <subtitle>소소한 개발 일지</subtitle>
  <updated>2024-03-13T12:50:41+09:00</updated>
  <author>
    <name>Youihyon Kim</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Youihyon Kim </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>JAVA 문법 (3) - if, else, else if 조건문</title>
    <link href="http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(3)-if-,-switch%EC%A1%B0%EA%B1%B4%EB%AC%B8/" rel="alternate" type="text/html" title="JAVA 문법 (3) - if, else, else if 조건문" />
    <published>2024-03-13T00:00:00+09:00</published>
  
    <updated>2024-03-13T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(3)-if-,-switch%EC%A1%B0%EA%B1%B4%EB%AC%B8/</id>
    <content src="http://localhost:4000/posts/JAVA-%EB%AC%B8%EB%B2%95-(3)-if-,-switch%EC%A1%B0%EA%B1%B4%EB%AC%B8/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Grammar" />
    
  

  
    <summary>
      





      🔎 조건문 이란



  개발자가 작성한 코드를 특정 조건에 따라 코드의 실행의 흐름을 제어하는 것이다. 조건문은 크게 
• if 문
	- else if
	- else 
• switch 문




🔎 if / else / else if

01. if문

if (조건식) {
	실행문1;
	실행문2;
}



  조건식이 true 일경우 중괄호 안에있는 실행문을 실행시킨다.



int age = 20;

if (age &amp;gt;= 20) { //true
	System.out.println("성인입니다") //실행
}
if (age =&amp;lt; 20) { //false
	System.out.println("미성년자입니다") //실행안됨
}

// 성인입니다



  age가 20살 이상일 경우, "성인입니다"...
    </summary>
  

  </entry>

  
  <entry>
    <title>mySQL 문법 (10) - DELETE 데이터 삭제하기</title>
    <link href="http://localhost:4000/posts/mySQL-%EB%AC%B8%EB%B2%95-(10)-DELETE-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="mySQL 문법 (10) - DELETE 데이터 삭제하기" />
    <published>2024-03-12T00:00:00+09:00</published>
  
    <updated>2024-03-12T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/mySQL-%EB%AC%B8%EB%B2%95-(10)-DELETE-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0/</id>
    <content src="http://localhost:4000/posts/mySQL-%EB%AC%B8%EB%B2%95-(10)-DELETE-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="mySQL" />
    
    <category term="Grammarㅤ" />
    
  

  
    <summary>
      





      💡DELETE

DELETE


  The DELETE statement is used to delete existing records in a table.


UPDATE 는 테이블의 기존 데이터 값을 삭제하는데 사용한다.

02. 주의사항


  반드시 WHERE절을 사용하여 특정 데이터만 삭제하는데 사용하자. 그렇지 않으면 모든 데이터가 삭제될수도…




💡문법 Syntax

01. 특정한 컬럼의 데이터값을 삭제할 때

DELETE FROM 테이블명 WHERE 컬럼1 = '삭제할 값';



02. 모든 데이터를 삭제할 때

DELETE FROM 테이블명




💡사용예시

01. 특정한 컬럼의 데이터값을 삭제할 때

DELETE FROM Customers
WHERE CustomerID = ...
    </summary>
  

  </entry>

  
  <entry>
    <title>JAVA study (7) - String 리터럴, String 객체</title>
    <link href="http://localhost:4000/posts/JAVA-study-(7)-String-%EB%A6%AC%ED%84%B0%EB%9F%B4,-String-%EA%B0%9D%EC%B2%B4/" rel="alternate" type="text/html" title="JAVA study (7) - String 리터럴, String 객체" />
    <published>2024-03-12T00:00:00+09:00</published>
  
    <updated>2024-03-12T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/JAVA-study-(7)-String-%EB%A6%AC%ED%84%B0%EB%9F%B4,-String-%EA%B0%9D%EC%B2%B4/</id>
    <content src="http://localhost:4000/posts/JAVA-study-(7)-String-%EB%A6%AC%ED%84%B0%EB%9F%B4,-String-%EA%B0%9D%EC%B2%B4/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  
    <summary>
      





      🔎 문자열 생성


Java에서 문자열을 생성하는 과정은 크게 2가지 방법이 있다.

  String literal
  new String()
두개는 어떤 차이를 가지고 있을까?



01. String Literal

String str1 = "Hello";
String str2 = "Hello";



  String Literal은 문자열을 생성하는 가장 간단하고 일반적이 방법이다. 이 방식은 문자열을 큰 따옴표(“ “) 로 둘러싸서 표현한다. 
String Literal 방식으로 문자열을 생성하면, JAVA Heap 메모리 영역의 문자열 상수 풀(String Constant Pool) 영역에 값이 저장이 된다.



02. new String()

String str3 = new String(...
    </summary>
  

  </entry>

  
  <entry>
    <title>JAVA study (6) - 리터럴 상수</title>
    <link href="http://localhost:4000/posts/JAVA-study-(6)-%EB%A6%AC%ED%84%B0%EB%9F%B4%EA%B3%BC-%EC%83%81%EC%88%98%EC%9D%98-%EC%B0%A8%EC%9D%B4/" rel="alternate" type="text/html" title="JAVA study (6) - 리터럴 상수" />
    <published>2024-03-12T00:00:00+09:00</published>
  
    <updated>2024-03-12T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/JAVA-study-(6)-%EB%A6%AC%ED%84%B0%EB%9F%B4%EA%B3%BC-%EC%83%81%EC%88%98%EC%9D%98-%EC%B0%A8%EC%9D%B4/</id>
    <content src="http://localhost:4000/posts/JAVA-study-(6)-%EB%A6%AC%ED%84%B0%EB%9F%B4%EA%B3%BC-%EC%83%81%EC%88%98%EC%9D%98-%EC%B0%A8%EC%9D%B4/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  
    <summary>
      





      🔎 리터럴

01. 리터럴(Literal) 이란?


  Literal은 데이터(값) 그 자체, 즉 변수에 넣은 변하지 않는 데이터 즉 문자 그대로의 값이라고 할 수 있다. 리터럴은 변수에 할당될 수 있는 구체적인 값을 직접 표현한 것이다.



02. 리터럴(Literal)의 종류 및 선언방법

1) 정수 리터럴 
정수 값을 나타내며, 10진수, 16진수, 8진수, 2진수로 표현
int a = 100
int b = 0x6F
int c = 0144
int d = 0b1010110

// a,b,c,d 는 변수, 값들은 리터럴


2) 부동 소수점 리터럴 
 실수 값을 나타내며, 소수점이 포함된 숫자나 지수를 사용해서 표현
double a = 3.14
double b = 2.5e2

// a,b 는 변...
    </summary>
  

  </entry>

  
  <entry>
    <title>JAVA study (5) - 전위,후위 증감 연산자</title>
    <link href="http://localhost:4000/posts/JAVA-study-(5)-%EC%A0%84%EC%9C%84,%ED%9B%84%EC%9C%84-%EC%A6%9D%EA%B0%90-%EC%97%B0%EC%82%B0%EC%9E%90/" rel="alternate" type="text/html" title="JAVA study (5) - 전위,후위 증감 연산자" />
    <published>2024-03-12T00:00:00+09:00</published>
  
    <updated>2024-03-12T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/JAVA-study-(5)-%EC%A0%84%EC%9C%84,%ED%9B%84%EC%9C%84-%EC%A6%9D%EA%B0%90-%EC%97%B0%EC%82%B0%EC%9E%90/</id>
    <content src="http://localhost:4000/posts/JAVA-study-(5)-%EC%A0%84%EC%9C%84,%ED%9B%84%EC%9C%84-%EC%A6%9D%EA%B0%90-%EC%97%B0%EC%82%B0%EC%9E%90/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  
    <summary>
      





      🔎 전위, 후위 증감 연산자란?

01. 전위 증감 연산자

++a , --a
전위 증감 연산자는 연산자가 변수의 앞에 있고,
변수의 값을 먼저 증가시키거나 감소시킨 후 값을 대입해준다.


02. 후위 증감 연산자

a++ , a--
후위 증감 연산자는 연산자가 변수의 앞에 있고,
변수의 값을 먼저 사용하고, 그 이후 값을 증가시키거나 감소시킨다.



03. 코드 예시

1) 전위 증감 연산자

public static void main(String[] args) {  
    int a = 1;  
    int b = 0;  
  
    b = ++a; //a의 값을 먼저 증가시키고, 그 결과를 b에 대입  
    System.out.println("a = " + a + ", b = " +...
    </summary>
  

  </entry>

</feed>


