

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Yeahyun Kim</title>
  <subtitle>소소한 개발 일지</subtitle>
  <updated>2024-05-02T09:40:14+09:00</updated>
  <author>
    <name>Youihyon Kim</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Youihyon Kim </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>JAVA study (12) - 다형성과 캐스팅 완전 정복하기</title>
    <link href="http://localhost:4000/posts/JAVA-study-(12)-%EB%8B%A4%ED%98%95%EC%84%B1%EA%B3%BC-%EC%BA%90%EC%8A%A4%ED%8C%85-%EC%99%84%EC%A0%84-%EC%A0%95%EB%B3%B5%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="JAVA study (12) - 다형성과 캐스팅 완전 정복하기" />
    <published>2024-05-02T00:00:00+09:00</published>
  
    <updated>2024-05-02T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/JAVA-study-(12)-%EB%8B%A4%ED%98%95%EC%84%B1%EA%B3%BC-%EC%BA%90%EC%8A%A4%ED%8C%85-%EC%99%84%EC%A0%84-%EC%A0%95%EB%B3%B5%ED%95%98%EA%B8%B0/</id>
    <content src="http://localhost:4000/posts/JAVA-study-(12)-%EB%8B%A4%ED%98%95%EC%84%B1%EA%B3%BC-%EC%BA%90%EC%8A%A4%ED%8C%85-%EC%99%84%EC%A0%84-%EC%A0%95%EB%B3%B5%ED%95%98%EA%B8%B0/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  
    <summary>
      





      🔎 다형성 (Polymorphism)


  다형성 이란?



  객체지향 프로그래밍의 대표적인 특징 중 하나인 다형성은 객체지향 프로그래밍에서  가장 중요한 역할을 수행한다. 간단하게 말하면, 다형성(polymorphism)이란 하나의 객체가 여러 가지 타입을 가질 수있는 것을 의미한다.



  자바에서는 대표적으로 아래의 방법들이 모두 다형성에 속한다고 보면 된다.
• 오버로딩(overloading)
• 오버라이딩(overriding)
• 인터페이스(interface)
• 추상메서드(abstract method)
• 추상클래스(abstract class)
• 업케스팅(up casting)
• 업케스팅(down casting)



자바에서 배열(Array)와 함께 자주 사용되는 자료형 중 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>JAVA study (11) - Static 변수와 메모리 구조</title>
    <link href="http://localhost:4000/posts/JAVA-study-(11)-Static-%EB%B3%80%EC%88%98%EC%99%80-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0/" rel="alternate" type="text/html" title="JAVA study (11) - Static 변수와 메모리 구조" />
    <published>2024-04-23T00:00:00+09:00</published>
  
    <updated>2024-04-23T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/JAVA-study-(11)-Static-%EB%B3%80%EC%88%98%EC%99%80-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0/</id>
    <content src="http://localhost:4000/posts/JAVA-study-(11)-Static-%EB%B3%80%EC%88%98%EC%99%80-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  
    <summary>
      





      🔎 Static 변수


  Static 변수란?



  static 변수는 클래스 수준에서 선언할 수 있고, 클래스의 모든 인스턴스에서 공유된다. 즉, 하나의 static 변수가 모든 객체에서 사용된다.




이게 도대체 무슨말인가.. 바로 코드를 작성해서 알아보았다.





  Static 변수 예시


public class Counter {
    // static 변수 선언
    public static int staticCount = 0;

    // 변수 선언
    public int count = 0;

    public Counter() {
        staticCount++; // static 변수 count 증가
        count++; // 일반 변수 co...
    </summary>
  

  </entry>

  
  <entry>
    <title>[Library Project] - KPT 회고</title>
    <link href="http://localhost:4000/posts/Library-Project-KPT-%ED%9A%8C%EA%B3%A0/" rel="alternate" type="text/html" title="[Library Project] - KPT 회고" />
    <published>2024-04-19T00:00:00+09:00</published>
  
    <updated>2024-04-19T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Library-Project-KPT-%ED%9A%8C%EA%B3%A0/</id>
    <content src="http://localhost:4000/posts/Library-Project-KPT-%ED%9A%8C%EA%B3%A0/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="KPT" />
    
  

  
    <summary>
      





      라이브러리 프로젝트 KPT 회고


  이번 프로젝트를 진행하며…


내일배움 캠프에서 진행한 미니 프로젝트, Library(라이브러리)를 무사히 마쳤다. 프로젝트 기간은 단 5일, 월요일부터 금요일까지였다. 미니 프로젝트라고는 하지만, 5일이라는 짧은 기간 동안 처음만난 5인으로 구성된 팀에서의 커뮤니케이션, 역할 분담, 그리고 깃허브 관리까지 쉽지 않았다.

운이 좋았는지는 몰라도, 우리 팀은 모두 열정이 넘쳤다. 모두가 각자 맡은 일을 책임감 있게 기한 내에 마무리했고, 이 과정에서 큰 문제는 없었다고 생각했지만, 더 나은 프로젝트를 위해 우리 팀의 프로젝트에 대한 회고를 진행해보기로 했다.

회고를 통해 우리는 프로젝트의 성공적인 부분과 아쉬웠던 부분을 함께 공유하고, 앞으로 어떻게 개선해 나갈...
    </summary>
  

  </entry>

  
  <entry>
    <title>KPT 회고란?</title>
    <link href="http://localhost:4000/posts/KPT-%ED%9A%8C%EA%B3%A0%EB%9E%80/" rel="alternate" type="text/html" title="KPT 회고란?" />
    <published>2024-04-19T00:00:00+09:00</published>
  
    <updated>2024-04-19T19:52:12+09:00</updated>
  
    <id>http://localhost:4000/posts/KPT-%ED%9A%8C%EA%B3%A0%EB%9E%80/</id>
    <content src="http://localhost:4000/posts/KPT-%ED%9A%8C%EA%B3%A0%EB%9E%80/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="KPT" />
    
  

  
    <summary>
      





      KPT( Keep, Problem, Try)란?



  1. KPT 회고



  KPT 회고는 ‘Keep’, ‘Problem’, ‘Try’의 약자로, 팀 회고 시간에 사용되는 방법론이다. 이 방법은 팀원 모두의 생각을 짧은 시간 안에 공유하고, 다음 회고를 위한 실행 가능하고 정 가능한 조치를 도출하는 것을 목표로 한다.
KPT 회고를 통해 팀의 커뮤니케이션과 협업을 강화하고, 지속적인 개선을 도모할 수 있다.





  2. KPT 회고의 구성



  • Keep : 팀이 계속 유지하고 싶은 점
• Problem : 팀이 직면한 문제점들을 공유
• Try: 문제점을 해결하기 위해 시도해볼 새로운 방법들을 제안





  3. KPT 회고의 효과



  • 팀원 참여 증진 : 모든 팀원이 생...
    </summary>
  

  </entry>

  
  <entry>
    <title>JAVA study (09) - 객체지향(OOP) 프로그램</title>
    <link href="http://localhost:4000/posts/JAVA-study-(09)-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5(OOP)-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8/" rel="alternate" type="text/html" title="JAVA study (09) - 객체지향(OOP) 프로그램" />
    <published>2024-04-09T00:00:00+09:00</published>
  
    <updated>2024-04-09T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/JAVA-study-(09)-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5(OOP)-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8/</id>
    <content src="http://localhost:4000/posts/JAVA-study-(09)-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5(OOP)-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8/" />
    <author>
      <name>yeahyun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Study" />
    
  

  
    <summary>
      





      🔎 객체지향 프로그래밍(Object Oriented Programming)


  객체지향이란?



  객체지향은 실제 세계를 모델링
 하여 소프트웨어를 개발하는 방법이다. 프로그램을 독립적인 객체들의 모임으로 파악하고, 이 객체들 간의 상호작용을 통해 데이터를 처리하는 방식이다.




  객체지향의 특징


1. 추상화(Abstraction)


  • 정의 : 복잡한 현실 세계를 단순화하여 필요한 부분만을 프로그램에 반영  
• 예시 : 차량을 객체로 모델링할 때, 엔진, 바퀴 등의 필수 요소만을 포함시키고, 차량의 색상이나 브랜드는 선택적으로 추가할 수 있음. 이렇게 하여 복잡한 차량이라는 개념을 단순화하여 프로그램 내에서 다룰 수 있음



  아래의 사진을 보면, 자동차는 Engine과 ...
    </summary>
  

  </entry>

</feed>


